# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type SignEthereumResponse {
  accessToken: String!
  refreshToken: String!
}

type Reply {
  id: Int!
  createdAt: DateTime!
  desc: String!
  reviewId: Int!
  likes: [Int]!
  dislikes: [Int]!
  userId: Int!
  review: Review!
  user: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Social {
  id: Int!
  lastUpdate: DateTime
  twitterId: String
  twitter: String
  discordId: String
  discord: String
  telegramId: String
  telegram: String
  userId: Int!
  user: User!
}

type Campaign {
  id: Int!
  createdAt: DateTime!
  title: String!
  description: String!
  metadata: String
  usersOnCampaign: [UsersOnCampaigns]!
}

type UsersOnCampaigns {
  userId: Int!
  campaignId: Int!
  claimed: Boolean!
  amount: Int!
  txnHash: String
  user: User!
  campaign: Campaign!
}

type Notification {
  id: Int!
  type: String!
  createdAt: DateTime!
  seen: Boolean!
  to: Int!
  reviewId: Int
  businessId: Int
  from: Int
  metaData: String
  userTo: User!
  business: Business
  review: Review
  userFrom: User
}

type User {
  id: Int!
  createdAt: DateTime!
  walletAddress: String!
  notiAccepted: Boolean!
  spamAccepted: Boolean!
  isAdmin: Boolean!
  lastUpdate: DateTime
  lastSyncIbt: DateTime
  email: String
  backgroundUrl: String
  nickname: String
  avatarUrl: String
  refreshToken: String
  password: String
  socical: Social
  myActivities: [Activity]!
  myReactActivities: [Activity]!
  replies: [Reply]!
  reviews: [Review]!
  notificationsTo: [Notification]!
  onCampaigns: [UsersOnCampaigns]!
}

type Activity {
  id: Int!
  createdAt: DateTime!
  kind: ActivityKind!
  userId: Int!
  reviewId: Int!
  point: Int!
  fromUserId: Int
  user: User!
  reactUser: User
  onReview: Review!
}

enum ActivityKind {
  reviewapproved
  reacthelpful
  reactdownful
  reply
  share
}

type CriteriaReview {
  id: Int!
  name: String!
  value: Int!
  reviewId: Int!
  review: Review!
}

type ReviewHistory {
  id: Int!
  createdAt: DateTime!
  rate: Int!
  reviewId: Int!
  txnHash: String!
  headline: String
  comment: String
  review: Review!
}

type Review {
  id: Int!
  status: ReviewStatuses!
  createdAt: DateTime!
  rate: Int!
  businessId: Int!
  userId: Int!
  likes: [Int]!
  dislikes: [Int]!
  sharings: [Int]!
  headline: String
  comment: String
  txnHash: String
  criterias: [CriteriaReview]!
  histories: [ReviewHistory]!
  replies: [Reply]!
  notifications: [Notification]!
  activities: [Activity]!
  business: Business!
  user: User!
}

enum ReviewStatuses {
  approved
  pending
  rejected
}

type Media {
  id: Int!
  source: MediaSoucres!
  createdAt: DateTime!
  url: String!
  businessId: Int!
  path: String
  business: Business!
}

enum MediaSoucres {
  Photo
  Telegram
  Discord
  Twitter
  Blog
}

type FollowersOnBusinesses {
  followerId: Int!
  businessId: Int!
  follower: User!
  business: Business!
}

type RatesOnBusinesses {
  valuerId: Int!
  businessId: Int!
  rating: Int!
  valuer: User!
  business: Business!
}

type ReplyOnFeedback {
  id: Int!
  createdAt: DateTime!
  feedbackId: Int!
  userId: Int!
  desc: String!
  user: User!
  feedback: FeedbacksOnBusinesses!
}

type FeedbacksOnBusinesses {
  id: Int!
  createdAt: DateTime!
  businessId: Int!
  userId: Int!
  text: String!
  urls: [String]!
  likes: [Int]!
  dislikes: [Int]!
  business: Business!
  user: User!
  replies: [ReplyOnFeedback]!
}

type Business {
  id: Int!
  mainCategory: String!
  status: BusinessStatus!
  type: [String]!
  tags: [String]!
  createdAt: DateTime!
  name: String!
  overview: String!
  token: String
  cmcId: Int
  logo: String
  founderName: String
  startDate: DateTime
  address: String
  whitepaperUrl: String
  contractAddress: String
  contractChain: String
  website: String
  chains: [String!]
  reviews: [Review]!
  medias: [Media]!
  followers: [FollowersOnBusinesses]!
  ratings: [RatesOnBusinesses]!
  feedbacks: [FeedbacksOnBusinesses]!
  followByU: Boolean!
}

enum BusinessStatus {
  approved
  pending
  rejected
}

type PaginatedBusinesses {
  nodes: [Business]!
  page: Int!
  limit: Int!
  total: Int!
}

type Query {
  businessses(limit: Int!, page: Int!): PaginatedBusinesses!
}

type Mutation {
  signEthereum(message: SiweMessageInputs!, signature: String!): SignEthereumResponse!
}

input SiweMessageInputs {
  address: String!
  chainId: Float!
  domain: String!
  issuedAt: String!
  nonce: String!
  statement: String!
  uri: String!
  version: String!
}