generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Business {
  id              Int                     @id @default(autoincrement())
  mainCategory    String                  @map("main_category") @db.VarChar
  status          BusinessStatus          @default(pending)
  type            String[]                @db.VarChar
  tags            String[]                @db.VarChar
  createdAt       DateTime                @default(now()) @map("created_at") @db.Timestamp(6)
  name            String                  @unique @db.VarChar
  overview        String                  @db.VarChar
  creatorId       Int                     @map("creator_id")
  token           String?                 @db.VarChar
  cmcId           Int?                    @map("cmc_id")
  logo            String?                 @db.VarChar
  founderName     String?                 @map("founder_name") @db.VarChar
  startDate       DateTime?               @map("start_date") @db.Timestamp(6)
  address         String?                 @db.VarChar
  whitepaperUrl   String?                 @map("whitepaper_url") @db.VarChar
  contractAddress String?                 @map("contract_address") @db.VarChar
  contractChain   String?                 @map("contract_chain") @db.VarChar
  website         String?                 @db.VarChar
  chains          String[]                @db.VarChar()
  reviews         Review[]
  medias          Media[]
  notifications   Notification[]
  followers       FollowersOnBusinesses[]
  ratings         RatesOnBusinesses[]
  creator         SuperUser               @relation(fields: [creatorId], references: [id])
  feedbacks       FeedbacksOnBusinesses[]

  @@index([type])
  @@index([mainCategory])
  @@index([mainCategory, type])
  @@index([cmcId])
  @@index([token])
  @@index([cmcId, token])
  @@map("businesses")
}

model Media {
  id         Int          @id @default(autoincrement())
  source     MediaSoucres
  createdAt  DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  url        String       @db.VarChar
  businessId Int          @map("business_id")
  path       String?
  business   Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("medias")
}

model User {
  id                    Int                     @id @default(autoincrement())
  createdAt             DateTime                @default(now()) @map("created_at") @db.Timestamp(6)
  walletAddress         String                  @unique @map("wallet_address") @db.VarChar
  notiAccepted          Boolean                 @default(true) @map("noti_accepted")
  spamAccepted          Boolean                 @default(true) @map("spam_accepted")
  isAdmin               Boolean                 @default(false)
  lastUpdate            DateTime?               @map("last_update") @db.Timestamp(6)
  lastSyncIbt           DateTime?               @map("last_sync_ibt") @db.Timestamp(6)
  email                 String?                 @unique @db.VarChar
  backgroundUrl         String?                 @map("background_url") @db.VarChar
  nickname              String?                 @db.VarChar
  avatarUrl             String?                 @map("avatar_url") @db.VarChar
  refreshToken          String?                 @map("refresh_token") @db.VarChar
  password              String?                 @db.VarChar
  didId                 Int?
  socical               Social?
  did                   Did?                    @relation(fields: [didId], references: [id], onDelete: SetNull)
  myActivities          Activity[]              @relation("activities_of_users")
  myReactActivities     Activity[]              @relation("reacted_activities_of_users")
  replies               Reply[]
  reviews               Review[]
  followingBusinesses   FollowersOnBusinesses[]
  ratedBusinesses       RatesOnBusinesses[]
  notificationsTo       Notification[]          @relation("notifications_toUser")
  notificationsFrom     Notification[]          @relation("notifications_fromUser")
  onCampaigns           UsersOnCampaigns[]
  feedbacksOnBusinesses FeedbacksOnBusinesses[]
  repliesOnFeedbacks    ReplyOnFeedback[]

  @@map("users")
}

model Social {
  id         Int       @id @default(autoincrement())
  lastUpdate DateTime? @map("last_update") @db.Timestamp(6)
  twitterId  String?
  twitter    String?
  discordId  String?
  discord    String?
  telegramId String?
  telegram   String?
  userId     Int       @unique @map("user_id")
  user       User      @relation(fields: [userId], references: [id])

  @@map("socials")
}

model FollowersOnBusinesses {
  followerId Int      @map("follower_id")
  follower   User     @relation(fields: [followerId], references: [id])
  businessId Int      @map("business_id")
  business   Business @relation(fields: [businessId], references: [id])

  @@id([followerId, businessId])
  @@map("followers_on_businesses")
}

model Email {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  email     String   @unique @db.VarChar

  @@map("emails")
}

model Notification {
  id         Int       @id @default(autoincrement())
  type       String
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  seen       Boolean   @default(false)
  to         Int
  reviewId   Int?      @map("review_id")
  businessId Int?      @map("business_id")
  from       Int?
  metaData   String?   @map("meta_data") @db.VarChar
  userTo     User      @relation("notifications_toUser", fields: [to], references: [id])
  business   Business? @relation(fields: [businessId], references: [id])
  review     Review?   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  userFrom   User?     @relation("notifications_fromUser", fields: [from], references: [id])

  @@map("notifications")
}

model Review {
  id            Int             @id @default(autoincrement())
  status        ReviewStatuses  @default(pending)
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  rate          Int
  businessId    Int             @map("business_id")
  userId        Int             @map("user_id")
  likes         Int[]           @default([])
  dislikes      Int[]           @default([])
  sharings      Int[]           @default([])
  headline      String?         @db.VarChar
  comment       String?         @db.VarChar
  txnHash       String?         @unique @map("txn_hash")
  criterias     CriteriaReview[]
  histories     ReviewHistory[]
  replies       Reply[]
  notifications Notification[]
  activities    Activity[]
  business      Business        @relation(fields: [businessId], references: [id])
  user          User            @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model ReviewHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  rate      Int
  reviewId  Int      @map("review_id")
  txnHash   String   @unique @map("txn_hash")
  headline  String?  @db.VarChar
  comment   String?  @db.VarChar
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("review_histories")
}

model Reply {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  desc      String   @db.VarChar
  reviewId  Int      @map("review_id")
  likes     Int[]    @default([])
  dislikes  Int[]    @default([])
  userId    Int      @map("user_id")
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("replies")
}

model SuperUser {
  id           Int            @id @default(autoincrement())
  role         SuperUserRoles
  refreshToken String?        @map("refresh_token") @db.VarChar
  username     String         @unique @db.VarChar
  password     String         @db.VarChar
  avatar       String?        @db.VarChar
  businesses   Business[]

  @@map("super_users")
}

model RatesOnBusinesses {
  valuerId   Int      @map("valuer_id")
  valuer     User     @relation(fields: [valuerId], references: [id])
  businessId Int      @map("business_id")
  business   Business @relation(fields: [businessId], references: [id])
  rating     Int

  @@id([valuerId, businessId])
  @@map("rates_on_businesses")
}

model Campaign {
  id              Int                @id @default(autoincrement())
  createdAt       DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  title           String             @db.VarChar
  description     String             @db.VarChar
  metadata        String?            @db.VarChar
  usersOnCampaign UsersOnCampaigns[]

  @@map("campaigns")
}

model UsersOnCampaigns {
  userId     Int      @map("user_id")
  campaignId Int      @map("campaign_id")
  claimed    Boolean  @default(false)
  amount     Int
  txnHash    String?  @db.VarChar
  user       User     @relation(fields: [userId], references: [id])
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@id([userId, campaignId])
  @@map("users_on_campaigns")
}

model Did {
  id       Int    @id
  doc      Json
  username String
  fullname String
  txnHash  String @map("txn_hash") @db.VarChar
  users    User[]

  @@map("dids")
}

model Storage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  url       String   @db.VarChar
  tag       String?  @db.VarChar
  banners   Banner[]

  @@map("storages")
}

model Banner {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  expriedTime DateTime @map("expried_time") @db.Timestamp(6)
  sourceId    Int      @map("source_id")
  source      Storage  @relation(fields: [sourceId], references: [id])

  @@map("banners")
}

model FeedbacksOnBusinesses {
  id         Int               @id @default(autoincrement())
  createdAt  DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  businessId Int               @map("business_id")
  userId     Int               @map("user_id")
  text       String            @db.VarChar
  urls       String[]          @db.VarChar
  likes      Int[]             @default([])
  dislikes   Int[]             @default([])
  business   Business          @relation(fields: [businessId], references: [id])
  user       User              @relation(fields: [userId], references: [id])
  replies    ReplyOnFeedback[]

  @@map("feedbacks_on_businesses")
}

model ReplyOnFeedback {
  id         Int                   @id @default(autoincrement())
  createdAt  DateTime              @default(now()) @map("created_at") @db.Timestamp(6)
  feedbackId Int                   @map("feedback_id")
  userId     Int                   @map("user_id")
  desc       String
  user       User                  @relation(fields: [userId], references: [id])
  feedback   FeedbacksOnBusinesses @relation(fields: [feedbackId], references: [id])

  @@map("replies_on_feedbacks")
}



model Activity {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  kind       ActivityKind
  userId     Int          @map("user_id")
  reviewId   Int          @map("review_id")
  point      Int
  fromUserId Int?         @map("from_user_id")
  user       User         @relation("activities_of_users", fields: [userId], references: [id])
  reactUser  User?        @relation("reacted_activities_of_users", fields: [fromUserId], references: [id])
  onReview   Review       @relation(fields: [reviewId], references: [id])

  @@map("activities")
}

model CriteriaReview {
  id         Int          @id @default(autoincrement())
  name       String
  value      Int
  reviewId   Int @map("review_id")
  review     Review @relation(fields: [reviewId], references: [id])

  @@map("criteria_reviews")
}

enum MediaSoucres {
  Photo
  Telegram
  Discord
  Twitter
  Blog
}

enum ReviewStatuses {
  approved
  pending
  rejected
}

enum SuperUserRoles {
  admin
  editor
}

enum BusinessStatus {
  approved
  pending
  rejected
}

enum ActivityKind {
  reviewapproved
  reacthelpful
  reactdownful
  reply
  share
}
